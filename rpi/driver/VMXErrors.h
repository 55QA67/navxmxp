/*
 * VMXErrors.h
 *
 *  Created on: 27 Jul 2017
 *      Author: pi
 */

#ifndef VMXERRORS_H_
#define VMXERRORS_H_

typedef int VMXErrorCode;

#define VMXERR_IO_INVALID_RESOURCE_HANDLE 				-20000
#define VMXERR_IO_INVALID_CHANNEL_INDEX   				-20001
#define VMXERR_IO_CHANNEL_ALREADY_ROUTED  				-20002
#define VMXERR_IO_CHANNEL_RESOURCE_INCOMPATIBILITY		-20003
#define VMXERR_IO_NO_AVAILABLE_RESOURCE_PORTS			-20004
#define VMXERR_IO_LOGICAL_ROUTING_ERROR					-20005
#define VMXERR_IO_PHYSICAL_ROUTING_ERROR				-20006
#define VMXERR_IO_RESOURCE_NOT_ALLOCATED				-20007
#define VMXERR_IO_RESOURCE_ALREADY_ALLOCATED			-20008
#define VMXERR_IO_SHARED_RESOURCE_ALREADY_ALLOCATED		-20009
#define VMXERR_IO_RESOURCE_ALLOCATION_ERROR				-20010
#define VMXERR_IO_RESOURCE_ROUTING_INCOMPLETE			-20011
#define VMXERR_IO_RESOURCE_TYPE_INVALID					-20012
#define VMXERR_IO_ERROR_CONFIGURING_PHYSICAL_RESOURCE	-20013
#define VMXERR_IO_SHARED_RESOURCE_UNROUTABLE			-20014
#define VMXERR_IO_INVALID_RESOURCE_PORT_INDEX			-20015
#define VMXERR_IO_INVALID_RESOURCE_TYPE					-20016
#define VMXERR_IO_INVALID_RESOURCE_INDEX				-20017
#define VMXERR_IO_BOARD_COMM_ERROR						-20018
#define VMXERR_IO_RESOURCE_INACTIVE						-20019
#define VMXERR_IO_CHANNEL_NOT_ROUTED_TO_RESOURCE		-20020
#define VMXERR_IO_UNITARY_CHANNEL_CAP_REQUIRED			-20021
#define VMXERR_IO_NO_COMPATIBLE_RESOURCES				-20022
#define VMXERR_IO_NO_UNALLOCATED_COMPATIBLE_RESOURCES	-20023
#define VMXERR_IO_INVALID_NULL_PARAMETER				-20024
#define VMXERR_IO_INVALID_CHANNEL_TYPE					-20025
#define VMXERR_IO_INVALID_RESOURCE_PROVIDER_TYPE		-20026

#ifdef __cplusplus
extern "C" {
#endif

const char *GetVMXErrorString(VMXErrorCode);

#ifdef __cplusplus
}
#endif

#define SET_VMXERROR(vmx_errcode_ptr, vmx_errcode) \
	do { \
		if(vmx_errcode_ptr) { \
			*vmx_errcode_ptr = vmx_errcode; \
		} \
	} while(0)

#endif /* VMXERRORS_H_ */
